# .gitignore
cat > .gitignore <<'EOF'
node_modules/
frontend/node_modules/
backend/node_modules/

# env
.env
.env.local
.env.development
.env.production

# logs
*.log
logs/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# OS/IDE
.DS_Store
Thumbs.db
.vscode/
.idea/

# builds
dist/
build/
coverage/
.next/
.out/
.cache/
turbo/
EOF

# .env.example
cat > .env.example <<'EOF'
MONGO_URI=mongodb+srv://bmcallister9008:Password123!@cluster0.evy0qab.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
JWT_SECRET=9O+GbU5z8BifriZi1DGbpGfudgWeJE4m1fAsAIajvxc=
PORT=3000
NODE_ENV=development
EOF

# Editor settings
cat > .editorconfig <<'EOF'
root = true
[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
indent_style = space
indent_size = 2
trim_trailing_whitespace = true
EOF

echo "18" > .nvmrc

# Backend package.json (create or update)
mkdir -p backend backend/models backend/scripts
cat > backend/package.json <<'EOF'
{
  "name": "pizza-planet-backend",
  "type": "module",
  "version": "0.1.0",
  "main": "server.js",
  "scripts": {
    "dev": "node backend/server.js",
    "start": "node backend/server.js",
    "seed": "node backend/scripts/seed.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "mongoose": "^8.5.0"
  }
}
EOF

# Backend server.js (create or overwrite if you want my version)
cat > backend/server.js <<'EOF'
import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import Pizza from './models/Pizza.js';
import Order from './models/Order.js';

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3000;
const MONGO_URI = process.env.MONGO_URI;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Serve frontend pages from same origin
app.use(express.static(path.join(__dirname, '../frontend/src/pages')));
app.get('/', (req, res) =>
  res.sendFile(path.join(__dirname, '../frontend/src/pages/index.html'))
);

// Healthcheck
app.get('/api/health', (_, res) => res.json({ ok: true }));

// GET /api/pizzas
app.get('/api/pizzas', async (_, res) => {
  try {
    const pizzas = await Pizza.find().lean();
    res.json(pizzas);
  } catch {
    res.status(500).json({ error: 'Failed to fetch pizzas' });
  }
});

// POST /api/order
app.post('/api/order', async (req, res) => {
  try {
    const { userId, items, total } = req.body || {};
    if (!userId || !Array.isArray(items) || typeof total !== 'number') {
      return res.status(400).json({ error: 'Invalid payload' });
    }
    const order = await Order.create({ userId, items, total });
    res.status(201).json(order);
  } catch {
    res.status(500).json({ error: 'Failed to create order' });
  }
});

async function start() {
  try {
    if (!MONGO_URI) {
      console.warn('Missing MONGO_URI (set it in .env or GitHub Secret). API will still start, but DB ops will fail.');
    } else {
      await mongoose.connect(MONGO_URI);
      console.log('MongoDB connected');
    }
    app.listen(PORT, () => console.log(`Server running on :${PORT}`));
  } catch (err) {
    console.error('Startup error', err);
    process.exit(1);
  }
}
start();
EOF

# Models (Pizza.js create if missing; Order.js new)
if [ ! -f backend/models/Pizza.js ]; then
  cat > backend/models/Pizza.js <<'EOF'
// models/Pizza.js
import mongoose from 'mongoose';
const pizzaSchema = new mongoose.Schema({
  name: String,
  description: String,
  price: Number,
  size: String,
  imageUrl: String
});
export default mongoose.model('Pizza', pizzaSchema);
EOF
fi

cat > backend/models/Order.js <<'EOF'
// models/Order.js
import mongoose from 'mongoose';
const itemSchema = new mongoose.Schema({
  pizzaId: { type: mongoose.Schema.Types.ObjectId, ref: 'Pizza', required: true },
  qty: { type: Number, required: true, min: 1 }
});
const orderSchema = new mongoose.Schema({
  userId: { type: String, required: true },
  items: { type: [itemSchema], required: true },
  total: { type: Number, required: true, min: 0 }
}, { timestamps: true });
export default mongoose.model('Order', orderSchema);
EOF

# Seed script
cat > backend/scripts/seed.js <<'EOF'
// scripts/seed.js
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Pizza from '../models/Pizza.js';

dotenv.config();
const MONGO_URI = process.env.MONGO_URI;
if (!MONGO_URI) { console.error('MONGO_URI is required'); process.exit(1); }

const pizzas = [
  { name: 'Margherita', description: 'Tomato, mozzarella, basil', price: 9.99, size: 'M', imageUrl: '' },
  { name: 'Pepperoni', description: 'Pepperoni, mozzarella', price: 12.49, size: 'L', imageUrl: '' },
  { name: 'Veggie', description: 'Bell peppers, onions, olives', price: 11.49, size: 'M', imageUrl: '' }
];

async function run() {
  await mongoose.connect(MONGO_URI);
  await Pizza.deleteMany({});
  await Pizza.insertMany(pizzas);
  console.log(`Inserted ${pizzas.length} pizzas.`);
  await mongoose.disconnect();
}
run().catch(err => { console.error(err); process.exit(1); });
EOF

# Frontend pages + script (create if missing)
mkdir -p frontend/src/pages
[ -f frontend/src/pages/index.html ] || cat > frontend/src/pages/index.html <<'EOF'
<!doctype html><html><head><meta charset="utf-8"><title>Pizza Planet</title></head>
<body><h1>Pizza Planet</h1><nav><a href="menu.html">Menu</a> | <a href="checkout.html">Checkout</a></nav></body></html>
EOF

[ -f frontend/src/pages/menu.html ] || cat > frontend/src/pages/menu.html <<'EOF'
<!doctype html><html><head><meta charset="utf-8"><title>Menu</title></head>
<body><h1>Menu</h1><div id="menu"></div><script src="menu.js"></script></body></html>
EOF

[ -f frontend/src/pages/checkout.html ] || cat > frontend/src/pages/checkout.html <<'EOF'
<!doctype html><html><head><meta charset="utf-8"><title>Checkout</title></head>
<body><h1>Checkout</h1></body></html>
EOF

cat > frontend/src/pages/menu.js <<'EOF'
async function loadMenu() {
  const el = document.getElementById('menu');
  try {
    const res = await fetch('/api/pizzas');
    if (!res.ok) throw new Error('Failed to fetch menu');
    const data = await res.json();
    el.innerHTML = data.map(p => `<div><h3>${p.name}</h3><p>${p.description}</p><strong>$${p.price}</strong></div>`).join('');
  } catch (e) {
    el.textContent = 'Could not load menu. Is the API running?';
  }
}
document.addEventListener('DOMContentLoaded', loadMenu);
EOF

# Docs (optional)
mkdir -p docs
[ -f docs/api_docs.md ] || cat > docs/api_docs.md <<'EOF'
# API Endpoints

## GET /api/pizzas
Returns list of pizzas

## POST /api/order
Creates a new order
Body:
```json
{
  "userId": "123",
  "items": [{ "pizzaId": "abc", "qty": 2 }],
  "total": 25.99
}
